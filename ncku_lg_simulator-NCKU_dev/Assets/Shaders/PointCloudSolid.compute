/**
 * Copyright (c) 2019 LG Electronics, Inc.
 *
 * This software contains code licensed as described in LICENSE.
 *
 */

/*
 * NOTE: Temporary exclude this shader from compilation
 *       for OpenGL based platform (Linux) due to weird
 *       compilation issues. Let's fix that later.
 */

#include "UnityCG.cginc"
#pragma only_renderers d3d11 vulkan metal

#pragma kernel SetupClear

RWTexture2D<float4> _SetupClearPosition;
RWTexture2D<float4> _SetupClearColor;
RWTexture2D<float> _SetupClearDepthBuffer;
RWTexture2D<float> _SetupClearDepthRaw;

[numthreads(8, 8, 1)]
void SetupClear(uint3 id : SV_DispatchThreadID) 
{
    _SetupClearPosition[id.xy] = float4(0, 0, 0, 0);
    _SetupClearColor[id.xy] = float4(0, 0, 0, 0);
    _SetupClearDepthBuffer[id.xy] = 0;
    _SetupClearDepthRaw[id.xy] = 0;
}


#pragma kernel SetupCopy

RWTexture2D<float4> _SetupCopyInput;
RWTexture2D<float> _SetupCopyInputPos;
RWTexture2D<float4> _SetupCopyPosition;
RWTexture2D<float4> _SetupCopyColor;
RWTexture2D<float> _SetupCopyDepthBuffer;
RWTexture2D<float> _SetupCopyDepthRaw;

float _FarPlane;

float4x4 _SetupCopyProj;
float4x4 _SetupCopyInverseProj;

[numthreads(8, 8, 1)]
void SetupCopy(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    _SetupCopyInput.GetDimensions(w, h);

    uint2 input = min(id.xy, uint2(w - 1, h - 1));

    float4 color = _SetupCopyInput.Load(input);
    float pos = _SetupCopyInputPos.Load(input);

    float2 xy = float2(float(input.x) / (w - 1), float(input.y) / (h - 1));
    float4 viewPos = mul(_SetupCopyInverseProj, float4(2 * xy - 1, pos, 1));
    viewPos /= viewPos.w;

    viewPos.z = -viewPos.z;
    if (color.w == 0 && id.x < w && id.y < h)
    {
        viewPos.z = _FarPlane;
    }

    color.w = 1;
    float weight = min(color.w, 1);
    float3 weightedColor = color.rgb * weight;

    _SetupCopyPosition[id.xy] = float4(viewPos.xyz, 1);
    _SetupCopyColor[id.xy] = float4(weightedColor, weight);
    _SetupCopyDepthBuffer[id.xy] = _FarPlane - viewPos.z;
    _SetupCopyDepthRaw[id.xy] = viewPos.z;
}


#pragma kernel Downsample

RWTexture2D<float4> _DownsampleInput;
RWTexture2D<float4> _DownsampleOutput;

RWTexture2D<float> _DownsampleDepthRawInput;
RWTexture2D<float> _DownsampleDepthRawOutput;

int2 _DownsamplePosMax;

[numthreads(8, 8, 1)]
void Downsample(uint3 id : SV_DispatchThreadID)
{
    uint2 pos = min(id.xy*2, _DownsamplePosMax);

    float4 a = _DownsampleInput.Load(pos + uint2(0, 0));
    float4 b = _DownsampleInput.Load(pos + uint2(0, 1));
    float4 c = _DownsampleInput.Load(pos + uint2(1, 0));
    float4 d = _DownsampleInput.Load(pos + uint2(1, 1));

    float4 r;
    if (a.z < b.z && a.z < c.z && a.z < d.z)
    {
        r = a;
    }
    else if (b.z < a.z && b.z < c.z && b.z < d.z)
    {
        r = b;
    }
    else if (c.z < a.z && c.z < b.z && c.z < d.z)
    {
        r = c;
    }
    else
    {
        r = d;
    }
    _DownsampleOutput[id.xy] = r;

    float da = _DownsampleDepthRawInput.Load(id.xy * 2 + uint2(0, 0));
    float db = _DownsampleDepthRawInput.Load(id.xy * 2 + uint2(0, 1));
    float dc = _DownsampleDepthRawInput.Load(id.xy * 2 + uint2(1, 0));
    float dd = _DownsampleDepthRawInput.Load(id.xy * 2 + uint2(1, 1));
    _DownsampleDepthRawOutput[id.xy] = min(min(da, db), min(dc, dd));
}


#pragma kernel RemoveHidden

Texture2D<float4> _RemoveHiddenPosition;
RWTexture2D<float4> _RemoveHiddenColor;
RWTexture2D<float> _RemoveHiddenDepthBuffer;
Texture2D<float> _RemoveHiddenDepthRaw;

RWTexture2D<float> _RemoveHiddenMask;

float _RemoveHiddenMagic;
float _RemoveHiddenMagic2;
int _RemoveHiddenLevel = 0;
int _RemoveHiddenLevelCount;

float GetOcclusion(float4 x, float4 y)
{
    return 1 - dot(normalize(y.xyz - x.xyz), -normalize(y.xyz));
}

float GetMinOcclusion(float4 pix, uint2 base, int2 delta, int maxlevel)
{
    uint w, h;
    _RemoveHiddenPosition.GetDimensions(w, h);

    float4 other = _RemoveHiddenPosition.Load(int3(base, 0), delta);
    float o = GetOcclusion(pix, other);

    for (int level = 1; level <= maxlevel; level++)
    {
        int2 pos = (base >> level) + delta;
        pos = clamp(pos, int2(0, 0), int2(w-1, h-1));
        other = _RemoveHiddenPosition.Load(int3(pos, level));
        o = min(o, GetOcclusion(pix, other));
    }

    return o;
}

[numthreads(8, 8, 1)]
void RemoveHidden(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    _RemoveHiddenPosition.GetDimensions(w, h);

    float4 pix = _RemoveHiddenPosition.Load(int3(id.xy, 0));
    float4 col = _RemoveHiddenColor.Load(id.xy);

    int maxlevel;
    if (_RemoveHiddenLevel == 0)
    {
        int depthLevel = 4;
        float z = _RemoveHiddenDepthRaw.Load(int3(id.xy >> depthLevel, depthLevel));

        maxlevel = (int)(log2(_RemoveHiddenMagic / z) / _RemoveHiddenMagic2);
    }
    else
    {
        maxlevel = _RemoveHiddenLevel;
    }
    maxlevel = clamp(maxlevel, 0, _RemoveHiddenLevelCount - 1);

    float avg = 0;
    avg += GetMinOcclusion(pix, id.xy, int2(-1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 1), maxlevel);
    avg /= 8;

    if (avg < 0.1f)
    {
        col = float4(1,1,1,0);
        _RemoveHiddenColor[id.xy] = float4(0, 0, 0, 0);
        _RemoveHiddenDepthBuffer[id.xy] = 0;
        _RemoveHiddenMask[id.xy] = 1;
    }
    else
    {
        _RemoveHiddenMask[id.xy] = 0;
    }

    // float4 color;
    // // red
    // if (maxlevel == 0) color = float4(0.5, 0, 0, 1);
    // else if (maxlevel <= 1) color = float4(1, 0, 0, 1);
    // // green
    // else if (maxlevel <= 2) color = float4(0, 0.5, 0, 1);
    // else if (maxlevel <= 3) color = float4(0, 1, 0, 1);
    // // blue
    // else if (maxlevel <= 4) color = float4(0, 0, 0.5, 1);
    // else if (maxlevel <= 5) color = float4(0, 0, 1, 1);
    // // yellow
    // else if (maxlevel <= 6) color = float4(0.5, 0.5, 0, 1);
    // else if (maxlevel <= 7) color = float4(1, 1, 0, 1);
    // // pink
    // else if (maxlevel <= 8) color = float4(0.5, 0, 0.5, 1);
    // else if (maxlevel <= 9) color = float4(1, 0, 1, 1);
    // // cyan
    // else if (maxlevel <= 10) color = float4(0, 0.5, 0.5, 1);
    // else if (maxlevel <= 11) color = float4(0, 1, 1, 1);
    // else color = float4(1, 1, 0, 1);
    // col.rgb *= color.rgb;
    // _RemoveHiddenColor[id.xy] = col;
}

#pragma kernel PullKernel

RWTexture2D<float4> _PullColorInput;
RWTexture2D<float4> _PullColorOutput;

RWTexture2D<float4> _PullDepthBufferInput;
RWTexture2D<float4> _PullDepthBufferOutput;

bool _PullSkipWeightMul = false;
float _PullFilterParam = 4;

[numthreads(8, 8, 1)]
void PullKernel(uint3 id : SV_DispatchThreadID)
{
    // Weights must add up to 1
    float4 weights = float4(0.25, 0.25, 0.25, 0.25);
    // float4 weights = float4(0.375, 0.125, 0.125, 0.375);

    float4 a = weights.r * _PullColorInput.Load(id.xy * 2 + uint2(0, 0));
    float4 b = weights.g * _PullColorInput.Load(id.xy * 2 + uint2(0, 1));
    float4 c = weights.b * _PullColorInput.Load(id.xy * 2 + uint2(1, 0));
    float4 d = weights.w * _PullColorInput.Load(id.xy * 2 + uint2(1, 1));

    float na = weights.r * _PullDepthBufferInput.Load(id.xy * 2 + uint2(0, 0)).w;
    float nb = weights.g * _PullDepthBufferInput.Load(id.xy * 2 + uint2(0, 1)).w;
    float nc = weights.b * _PullDepthBufferInput.Load(id.xy * 2 + uint2(1, 0)).w;
    float nd = weights.w * _PullDepthBufferInput.Load(id.xy * 2 + uint2(1, 1)).w;

    float wn = a.w + b.w + c.w + d.w;
    float wwn = 1 - pow(abs(1 - wn), _PullFilterParam);

    float4 col = float4(0, 0, 0, 0);
    float depth = 0;

    if (wn != 0)
    {
        float3 sum = a.rgb + b.rgb + c.rgb + d.rgb;
        float dsum = na + nb + nc + nd;
        float w = (_PullSkipWeightMul ? 1 : wwn) / wn;
        col = float4(w * sum, wwn);
        depth = w * dsum;
    }

    _PullColorOutput[id.xy] = col;
    _PullDepthBufferOutput[id.xy] = float4(0, 0, 0, depth);
}


#pragma kernel PushKernel

RWTexture2D<float4> _PushColorInput;
RWTexture2D<float4> _PushColorOutput;

RWTexture2D<float4> _PushDepthBufferInput;
RWTexture2D<float4> _PushDepthBufferOutput;

[numthreads(8, 8, 1)]
void PushKernel(uint3 id : SV_DispatchThreadID)
{
    int2 xy2 = id.xy / 2;
    int2 mod2 = id.xy % 2;
    int3 offset = int3(mod2 * 2 - int2(1, 1), 0);

    float4 x = _PushColorOutput.Load(id.xy);
    float n = _PushDepthBufferOutput.Load(id.xy).w;

    // Weights must add up to 1
    float4 weights = float4(0.25, 0.25, 0.25, 0.25);
    // float4 weights = float4(0.375, 0.125, 0.125, 0.375);

    float4 a = weights.r * _PushColorInput.Load(xy2 + offset.zz);
    float4 b = weights.g * _PushColorInput.Load(xy2 + offset.zy);
    float4 c = weights.b * _PushColorInput.Load(xy2 + offset.xz);
    float4 d = weights.w * _PushColorInput.Load(xy2 + offset.xy);

    float na = weights.r * _PushDepthBufferInput.Load(xy2 + offset.zz).w;
    float nb = weights.g * _PushDepthBufferInput.Load(xy2 + offset.zy).w;
    float nc = weights.b * _PushDepthBufferInput.Load(xy2 + offset.xz).w;
    float nd = weights.w * _PushDepthBufferInput.Load(xy2 + offset.xy).w;

    float3 ni = a.rgb + b.rgb + c.rgb + d.rgb;
    float di = na + nb + nc + nd;

    float3 xn = ni * (1 - x.w) + x.rgb;
    float dn = di * (1 - x.w) + n;

    _PushColorOutput[id.xy] = float4(xn, x.w);
    _PushDepthBufferOutput[id.xy] = float4(0, 0, 0, dn);
}

#pragma kernel CalculateNormalsKernel

RWTexture2D<float4> _NormalsInOut;
RWTexture2D<float4> _NormalsOut;

[numthreads(8, 8, 1)]
void CalculateNormalsKernel(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    _NormalsInOut.GetDimensions(w, h);

    float dc = _NormalsInOut.Load(id.xy).w;
    float du = _NormalsInOut.Load(id.xy + uint2(0, 1)).w;
    float dd = _NormalsInOut.Load(id.xy + uint2(0, -1)).w;
    float dr = _NormalsInOut.Load(id.xy + uint2(1, 0)).w;
    float dl = _NormalsInOut.Load(id.xy + uint2(-1, 0)).w;

    float xyStep = 1.0f / h;

    float3 xVec, yVec;
    if (abs(du - dc) < abs(dd - dc))
#if UNITY_UV_STARTS_AT_TOP
        yVec = float3(0, xyStep, dd - dc);
#else
        yVec = float3(0, xyStep, dc - dd);
#endif
    else
#if UNITY_UV_STARTS_AT_TOP
        yVec = float3(0, xyStep, dc - du);
#else
        yVec = float3(0, xyStep, du - dc);
#endif

    if (abs(dr - dc) < abs(dl - dc))
        xVec = float3(xyStep, 0, dc - dl);
    else
        xVec = float3(xyStep, 0, dr - dc);

    float3 nVec = normalize(cross(xVec, yVec)) * 0.5 + 0.5;
    _NormalsInOut[id.xy] = float4(nVec, dc);
}