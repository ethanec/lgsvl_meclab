//
Pass
{
    Cull Off
    ZWrite Off
    ZTest Always
    Blend Off

    HLSLPROGRAM

    #pragma only_renderers d3d11 vulkan metal

    #pragma vertex Vert
    #pragma fragment Frag

    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"
    #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/ShaderVariables.hlsl"
    #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

    struct SurfaceDescriptionInputs
    {
        float4 uv0;
    };

    struct SurfaceDescriptionOutputs
    {
        float3 Color;
        float Alpha;
    };

    //-------------------------------------------------------------------------------------
    // Graph generated code
    //-------------------------------------------------------------------------------------
    $splice(Graph)
    //-------------------------------------------------------------------------------------
    // End graph generated code
    //-------------------------------------------------------------------------------------

    struct v2f
    {
        float4 vertex   : SV_POSITION;
        float2 texcoord : TEXCOORD0;
    };

    v2f Vert(uint id : SV_VertexID)
    {
        v2f o;
        o.vertex = GetFullScreenTriangleVertexPosition(id);
        o.texcoord = GetFullScreenTriangleTexCoord(id);
        return o;
    }

    float4 Frag(v2f IN) : COLOR
    {
        SurfaceDescriptionInputs input;
        input.uv0 = float4(IN.texcoord.xy, 0, 0);

        SurfaceDescriptionOutputs output;
        output = SurfaceDescriptionFunction(input);

        return float4(output.Color, output.Alpha);
    }

    ENDHLSL
}
